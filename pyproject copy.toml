[project]
name = "investmentadvisory"
version = "0.1.0"
description = "AI-powered investment advisory service with intelligent agent architecture for financial analysis and portfolio management"
readme = "README.md"
authors = [{ name = "Hemprasad Badgujar", email = "hemprasad@badgujar.org" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Framework :: FastAPI",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

requires-python = ">=3.11"

dependencies = [
    # Core AI/ML Framework
    "docx2txt ~=0.8",
    "duckduckgo-search>=7.3.0",
    "fastapi ~=0.115.5",
    "grpcio >=1.68.0",
    "httpx ~=0.27.2",
    "jiter ~=0.8.2",
    "langchain-core ~=0.3.33",
    "langchain-community ~=0.3.16",
    "langchain-anthropic~=0.3.0",
    "langchain-aws ~=0.2.14",
    "langchain-chroma ~=0.2.3",
    "langchain-google-genai ~=2.0.11",
    "langchain-google-vertexai>=2.0.7",
    "langchain-groq ~=0.2.1",
    "langchain-ollama ~=0.2.3",
    "langchain-openai ~=0.3.0",
    "langfuse ~=2.60.5",
    "langgraph ~=0.5.0",
    "langgraph-checkpoint-mongodb ~=0.1.3",
    "langgraph-checkpoint-postgres ~=2.0.13",
    "langgraph-checkpoint-sqlite ~=2.0.1",
    "langgraph-supervisor ~=0.0.27",
    "langsmith ~=0.4.0",

    
    # Financial Data & Analysis
    "yfinance>=0.2.18",
    "alpha-vantage>=2.3.1",
    "fredapi>=0.5.0",
    "pandas-datareader>=0.10.0",
    "ta>=0.10.2",
    "plotly>=5.17.0",

    
    # Data Processing & Analysis
    "numexpr ~=2.10.1",
    "numpy ~=1.26.4; python_version <= '3.12'",
    "numpy ~=2.2.3; python_version >= '3.13'",
    "pandas ~=2.2.3",
    "scipy>=1.16.2",
    "scikit-learn>=1.3.0",
    "pyarrow >=18.1.0",
    
    # Database & Storage
    "psycopg[binary,pool] ~=3.2.4",
    "sqlalchemy>=2.0.23",
    "alembic>=1.12.1",
    "redis>=5.0.1",
    "celery>=5.3.4",
    
    # Web Framework & API
    "uvicorn ~=0.32.1",
    "gunicorn>=21.2.0",
    "pydantic ~=2.10.1",
    "pydantic-settings ~=2.6.1",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    
    # Document Processing
    "pypdf ~=5.3.0",
    "python-docx>=0.8.11",
    "openpyxl>=3.1.2",
    
    # Utilities & Environment
    "python-dotenv ~=1.0.1",
    "setuptools ~=75.6.0",
    "tiktoken >=0.8.0",
    "pyowm ~=3.3.0",
    "requests>=2.31.0",
    "aiofiles>=23.2.1",
    "python-dateutil>=2.8.2",
    "pytz>=2023.3",
    
    # UI & Visualization
    "streamlit ~=1.46.0",
    "streamlit-option-menu>=0.3.6",
    "streamlit-plotly-events>=0.0.6",
    "streamlit-aggrid>=0.3.4",
    "streamlit-authenticator>=0.2.3",
    
    # Machine Learning & AI
    "onnxruntime ~= 1.21.1",
    "transformers>=4.35.0",
    "torch>=2.1.0",
    "optuna>=3.4.0",
    "mlflow>=2.8.1",
    
    # Security & Authentication
    "cryptography>=41.0.7",
    "bcrypt>=4.1.2",
    "argon2-cffi>=23.1.0",
    
    # Monitoring & Logging
    "structlog>=23.2.0",
    "sentry-sdk[fastapi]>=1.38.0",
    "prometheus-client>=0.19.0",
]

[dependency-groups]
# Development dependencies
dev = [
    "langgraph-cli[inmem]",
    "pre-commit>=3.5.0",
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-env>=1.1.0",
    "pytest-asyncio>=0.21.1",
    "pytest-mock>=3.12.0",
    "ruff>=0.1.6",
    "mypy>=1.7.1",
    "black>=23.11.0",
    "isort>=5.12.0",
    "coverage>=7.3.2",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
    "freezegun>=1.2.2",
    "httpx>=0.27.2",
    "pytest-httpx>=0.25.0",
]

# Minimal client dependencies for lightweight deployment
client = [
    "httpx~=0.27.2",
    "pydantic ~=2.10.1",
    "python-dotenv ~=1.0.1",
    "streamlit~=1.46.0",
    "requests>=2.31.0",
    "aiofiles>=23.2.1",
]

# Financial analysis specific dependencies
financial = [
    "yfinance>=0.2.18",
    "alpha-vantage>=2.3.1",
    "fredapi>=0.5.0",
    "pandas-datareader>=0.10.0",
    "ta>=0.10.2",
    "plotly>=5.17.0",
    "seaborn>=0.12.2",
    "matplotlib>=3.7.2",
    "scikit-learn>=1.3.0",
    "scipy>=1.16.2",
]

# Machine learning and AI dependencies
ml = [
    "transformers>=4.35.0",
    "optuna>=3.4.0",
    "mlflow>=2.8.1",
    "onnxruntime ~= 1.21.1",
    "scikit-learn>=1.3.0",
]

# Ruff configuration for code formatting and linting
[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q",  # flake8-quotes
    "S",  # flake8-bandit
    "T20", # flake8-print
    "PT", # flake8-pytest-style
    "RET", # flake8-return
    "PIE", # flake8-pie
    "A",  # flake8-builtins
    "C90", # mccabe
    "ICN", # flake8-import-conventions
    "G",  # flake8-logging-format
    "INP", # flake8-no-pep420
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD", # pandas-vet
    "PGH", # pygrep-hooks
    "PL", # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # numpy
    "PERF", # perflint
    "FURB", # refurb
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert detected
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "TRY003", # avoid specifying long messages outside the exception class
    "EM101", # raw string in exception
    "EM102", # f-string in exception
    "TC003", # move standard library import into TYPE_CHECKING block
    "COM812", # avoid conflict with formatter
]
extend-select = ["I", "U"]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.isort]
known-first-party = ["src", "tests"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "PLR2004", "ARG", "FBT"]
"scripts/**/*" = ["T20", "S101"]
"**/migrations/**/*" = ["ALL"]

# Pytest configuration
[tool.pytest.ini_options]
pythonpath = ["src"]
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
    "--maxfail=5",
    "--durations=10",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "financial: marks tests related to financial data",
    "ml: marks tests related to machine learning",
    "api: marks tests related to API endpoints",
    "database: marks tests that require database access",
    "external: marks tests that require external services",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.pytest_env]
OPENAI_API_KEY = "sk-fake-openai-key"
ANTHROPIC_API_KEY = "sk-fake-anthropic-key"
GOOGLE_API_KEY = "fake-google-key"
GROQ_API_KEY = "gsk_fake-groq-key"
LANGCHAIN_API_KEY = "ls__fake-langchain-key"
LANGFUSE_PUBLIC_KEY = "pk_fake-langfuse-key"
LANGFUSE_SECRET_KEY = "sk_fake-langfuse-key"
DATABASE_TYPE = "sqlite"
SQLITE_DB_PATH = ":memory:"
LOG_LEVEL = "WARNING"

# MyPy configuration
[tool.mypy]
plugins = ["pydantic.mypy"]
exclude = [
    "src/streamlit_app.py",
    "tests/",
    "scripts/",
    "**/migrations/",
    "**/__pycache__/",
]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
error_summary = true

[[tool.mypy.overrides]]
module = [
    "numexpr.*",
    "ta.*",
    "yfinance.*",
    "alpha_vantage.*",
    "fredapi.*",
    "pandas_datareader.*",
    "mplfinance.*",
    "plotly.*",
    "seaborn.*",
    "sklearn.*",
    "torch.*",
    "transformers.*",
    "optuna.*",
    "mlflow.*",
    "onnxruntime.*",
    "redis.*",
    "celery.*",
    "structlog.*",
    "sentry_sdk.*",
    "prometheus_client.*",
    "cryptography.*",
    "bcrypt.*",
    "jose.*",
    "passlib.*",
    "factory_boy.*",
    "faker.*",
    "freezegun.*",
]
follow_untyped_imports = true
ignore_missing_imports = true

# Black configuration
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["src", "tests"]
known_third_party = [
    "fastapi",
    "pydantic",
    "streamlit",
    "langchain",
    "langgraph",
    "pandas",
    "numpy",
    "scipy",
    "sklearn",
    "plotly",
    "yfinance",
    "ta",
    "torch",
    "transformers",
    "pytest",
    "httpx",
    "sqlalchemy",
    "redis",
    "celery",
    "structlog",
    "sentry_sdk",
    "prometheus_client",
    "cryptography",
    "bcrypt",
    "jose",
    "passlib",
    "factory_boy",
    "faker",
    "freezegun",
    "ruff",
    "mypy",
    "coverage",
    "pre_commit",
]
